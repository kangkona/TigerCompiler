<program src="test/TreeVisitor.java.xml">
<main name="TreeVisitor">
<block>
<locals>
</locals>
<statements>
<print>
<call>
<caller>
<newobject>TV</newobject>
</caller>
<method>Start</method>
<realArgs>
</realArgs>
</call>
</print>
</statements>
</block>
</main>
<class name="TV">
<fields>
</fields>
<methods>
<method name="Start" rtype="int">
<formals>
</formals>
<locals>
<dec type="Tree">root</dec>
<dec type="bool">ntb</dec>
<dec type="int">nti</dec>
<dec type="MyVisitor">v</dec>
</locals>
<statements>
<assign>
<left>
<id>root</id>
</left>
<right>
<newobject>Tree</newobject>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Init</method>
<realArgs>
<num>16</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Print</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<print>
<num>100000000</num>
</print>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>8</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>24</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>4</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>12</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>20</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>28</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Insert</method>
<realArgs>
<num>14</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Print</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<print>
<num>100000000</num>
</print>
<assign>
<left>
<id>v</id>
</left>
<right>
<newobject>MyVisitor</newobject>
</right>
</assign>
<print>
<num>50000000</num>
</print>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>accept</method>
<realArgs>
<id>v</id>
</realArgs>
</call>
</right>
</assign>
<print>
<num>100000000</num>
</print>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>24</num>
</realArgs>
</call>
</print>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>12</num>
</realArgs>
</call>
</print>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>16</num>
</realArgs>
</call>
</print>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>50</num>
</realArgs>
</call>
</print>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>12</num>
</realArgs>
</call>
</print>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Delete</method>
<realArgs>
<num>12</num>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>root</id>
</caller>
<method>Print</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<print>
<call>
<caller>
<id>root</id>
</caller>
<method>Search</method>
<realArgs>
<num>12</num>
</realArgs>
</call>
</print>
</statements>
</method>
</methods>
</class>
<class name="Tree">
<fields>
<field type="Tree">left</field>
<field type="Tree">right</field>
<field type="int">key</field>
<field type="bool">has_left</field>
<field type="bool">has_right</field>
<field type="Tree">my_null</field>
</fields>
<methods>
<method name="Init" rtype="bool">
<formals>
<dec type="int">v_key</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">key</id>
</left>
<right>
<id>v_key</id>
</right>
</assign>
<assign>
<left>
<id isField="yes">has_left</id>
</left>
<right>
<false /></right>
</assign>
<assign>
<left>
<id isField="yes">has_right</id>
</left>
<right>
<false /></right>
</assign>
</statements>
</method>
<method name="SetRight" rtype="bool">
<formals>
<dec type="Tree">rn</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">right</id>
</left>
<right>
<id>rn</id>
</right>
</assign>
</statements>
</method>
<method name="SetLeft" rtype="bool">
<formals>
<dec type="Tree">ln</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">left</id>
</left>
<right>
<id>ln</id>
</right>
</assign>
</statements>
</method>
<method name="GetRight" rtype="Tree">
<formals>
</formals>
<locals>
</locals>
<statements>
</statements>
</method>
<method name="GetLeft" rtype="Tree">
<formals>
</formals>
<locals>
</locals>
<statements>
</statements>
</method>
<method name="GetKey" rtype="int">
<formals>
</formals>
<locals>
</locals>
<statements>
</statements>
</method>
<method name="SetKey" rtype="bool">
<formals>
<dec type="int">v_key</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">key</id>
</left>
<right>
<id>v_key</id>
</right>
</assign>
</statements>
</method>
<method name="GetHas_Right" rtype="bool">
<formals>
</formals>
<locals>
</locals>
<statements>
</statements>
</method>
<method name="GetHas_Left" rtype="bool">
<formals>
</formals>
<locals>
</locals>
<statements>
</statements>
</method>
<method name="SetHas_Left" rtype="bool">
<formals>
<dec type="bool">val</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">has_left</id>
</left>
<right>
<id>val</id>
</right>
</assign>
</statements>
</method>
<method name="SetHas_Right" rtype="bool">
<formals>
<dec type="bool">val</dec>
</formals>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">has_right</id>
</left>
<right>
<id>val</id>
</right>
</assign>
</statements>
</method>
<method name="Compare" rtype="bool">
<formals>
<dec type="int">num1</dec>
<dec type="int">num2</dec>
</formals>
<locals>
<dec type="bool">ntb</dec>
<dec type="int">nti</dec>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<false /></right>
</assign>
<assign>
<left>
<id>nti</id>
</left>
<right>
<add>
<left>
<id>num2</id>
</left>
<right>
<num>1</num>
</right>
</add>
</right>
</assign>
<if>
<condition>
<lt>
<left>
<id>num1</id>
</left>
<right>
<id>num2</id>
</right>
</lt>
</condition>
<then>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<false /></right>
</assign>
</then>
<else>
<if>
<condition>
<not><paren>
<lt>
<left>
<id>num1</id>
</left>
<right>
<id>nti</id>
</right>
</lt>
</paren>
</not>
</condition>
<then>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<false /></right>
</assign>
</then>
<else>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<true />
</right>
</assign>
</else>
</if>
</else>
</if>
</statements>
</method>
<method name="Insert" rtype="bool">
<formals>
<dec type="int">v_key</dec>
</formals>
<locals>
<dec type="Tree">new_node</dec>
<dec type="bool">ntb</dec>
<dec type="Tree">current_node</dec>
<dec type="bool">cont</dec>
<dec type="int">key_aux</dec>
</locals>
<statements>
<assign>
<left>
<id>new_node</id>
</left>
<right>
<newobject>Tree</newobject>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>new_node</id>
</caller>
<method>Init</method>
<realArgs>
<id>v_key</id>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<this />
</right>
</assign>
<assign>
<left>
<id>cont</id>
</left>
<right>
<true />
</right>
</assign>
<while>
<condition>
<id>cont</id>
</condition>
<body>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>key_aux</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<if>
<condition>
<lt>
<left>
<id>v_key</id>
</left>
<right>
<id>key_aux</id>
</right>
</lt>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>SetHas_Left</method>
<realArgs>
<true />
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>SetLeft</method>
<realArgs>
<id>new_node</id>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</else>
</if>
</statements>
</block>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>SetHas_Right</method>
<realArgs>
<true />
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>SetRight</method>
<realArgs>
<id>new_node</id>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</else>
</if>
</statements>
</block>
</else>
</if>
</statements>
</block>
</body>
</while>
</statements>
</method>
<method name="Delete" rtype="bool">
<formals>
<dec type="int">v_key</dec>
</formals>
<locals>
<dec type="Tree">current_node</dec>
<dec type="Tree">parent_node</dec>
<dec type="bool">cont</dec>
<dec type="bool">found</dec>
<dec type="bool">ntb</dec>
<dec type="bool">is_root</dec>
<dec type="int">key_aux</dec>
</locals>
<statements>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<this />
</right>
</assign>
<assign>
<left>
<id>parent_node</id>
</left>
<right>
<this />
</right>
</assign>
<assign>
<left>
<id>cont</id>
</left>
<right>
<true />
</right>
</assign>
<assign>
<left>
<id>found</id>
</left>
<right>
<false /></right>
</assign>
<assign>
<left>
<id>is_root</id>
</left>
<right>
<true />
</right>
</assign>
<while>
<condition>
<id>cont</id>
</condition>
<body>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>key_aux</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<if>
<condition>
<lt>
<left>
<id>v_key</id>
</left>
<right>
<id>key_aux</id>
</right>
</lt>
</condition>
<then>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>parent_node</id>
</left>
<right>
<id>current_node</id>
</right>
</assign>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</else>
</if>
</then>
<else>
<if>
<condition>
<lt>
<left>
<id>key_aux</id>
</left>
<right>
<id>v_key</id>
</right>
</lt>
</condition>
<then>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>parent_node</id>
</left>
<right>
<id>current_node</id>
</right>
</assign>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</else>
</if>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<if>
<condition>
<id>is_root</id>
</condition>
<then>
<if>
<condition>
<and>
<left>
<not><call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</not>
</left>
<right>
<not><call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</not>
</right>
</and>
</condition>
<then>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<true />
</right>
</assign>
</then>
<else>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>Remove</method>
<realArgs>
<id>parent_node</id>
<id>current_node</id>
</realArgs>
</call>
</right>
</assign>
</else>
</if>
</then>
<else>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>Remove</method>
<realArgs>
<id>parent_node</id>
<id>current_node</id>
</realArgs>
</call>
</right>
</assign>
</else>
</if>
<assign>
<left>
<id>found</id>
</left>
<right>
<true />
</right>
</assign>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</statements>
</block>
</else>
</if>
</else>
</if>
<assign>
<left>
<id>is_root</id>
</left>
<right>
<false /></right>
</assign>
</statements>
</block>
</body>
</while>
</statements>
</method>
<method name="Remove" rtype="bool">
<formals>
<dec type="Tree">p_node</dec>
<dec type="Tree">c_node</dec>
</formals>
<locals>
<dec type="bool">ntb</dec>
<dec type="int">auxkey1</dec>
<dec type="int">auxkey2</dec>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>RemoveLeft</method>
<realArgs>
<id>p_node</id>
<id>c_node</id>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<if>
<condition>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>RemoveRight</method>
<realArgs>
<id>p_node</id>
<id>c_node</id>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>auxkey1</id>
</left>
<right>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>auxkey2</id>
</left>
<right>
<call>
<caller>
<paren>
<call>
<caller>
<id>p_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</paren>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<if>
<condition>
<call>
<caller>
<this />
</caller>
<method>Compare</method>
<realArgs>
<id>auxkey1</id>
<id>auxkey2</id>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetLeft</method>
<realArgs>
<id isField="yes">my_null</id>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetHas_Left</method>
<realArgs>
<false /></realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetRight</method>
<realArgs>
<id isField="yes">my_null</id>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetHas_Right</method>
<realArgs>
<false /></realArgs>
</call>
</right>
</assign>
</statements>
</block>
</else>
</if>
</statements>
</block>
</else>
</if>
</else>
</if>
</statements>
</method>
<method name="RemoveRight" rtype="bool">
<formals>
<dec type="Tree">p_node</dec>
<dec type="Tree">c_node</dec>
</formals>
<locals>
<dec type="bool">ntb</dec>
</locals>
<statements>
<while>
<condition>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<body>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>c_node</id>
</caller>
<method>SetKey</method>
<realArgs>
<call>
<caller>
<paren>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</paren>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>p_node</id>
</left>
<right>
<id>c_node</id>
</right>
</assign>
<assign>
<left>
<id>c_node</id>
</left>
<right>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</body>
</while>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetRight</method>
<realArgs>
<id isField="yes">my_null</id>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetHas_Right</method>
<realArgs>
<false /></realArgs>
</call>
</right>
</assign>
</statements>
</method>
<method name="RemoveLeft" rtype="bool">
<formals>
<dec type="Tree">p_node</dec>
<dec type="Tree">c_node</dec>
</formals>
<locals>
<dec type="bool">ntb</dec>
</locals>
<statements>
<while>
<condition>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<body>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>c_node</id>
</caller>
<method>SetKey</method>
<realArgs>
<call>
<caller>
<paren>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</paren>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>p_node</id>
</left>
<right>
<id>c_node</id>
</right>
</assign>
<assign>
<left>
<id>c_node</id>
</left>
<right>
<call>
<caller>
<id>c_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</body>
</while>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetLeft</method>
<realArgs>
<id isField="yes">my_null</id>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<id>p_node</id>
</caller>
<method>SetHas_Left</method>
<realArgs>
<false /></realArgs>
</call>
</right>
</assign>
</statements>
</method>
<method name="Search" rtype="int">
<formals>
<dec type="int">v_key</dec>
</formals>
<locals>
<dec type="Tree">current_node</dec>
<dec type="int">ifound</dec>
<dec type="bool">cont</dec>
<dec type="int">key_aux</dec>
</locals>
<statements>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<this />
</right>
</assign>
<assign>
<left>
<id>cont</id>
</left>
<right>
<true />
</right>
</assign>
<assign>
<left>
<id>ifound</id>
</left>
<right>
<num>0</num>
</right>
</assign>
<while>
<condition>
<id>cont</id>
</condition>
<body>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>key_aux</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<if>
<condition>
<lt>
<left>
<id>v_key</id>
</left>
<right>
<id>key_aux</id>
</right>
</lt>
</condition>
<then>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</else>
</if>
</then>
<else>
<if>
<condition>
<lt>
<left>
<id>key_aux</id>
</left>
<right>
<id>v_key</id>
</right>
</lt>
</condition>
<then>
<if>
<condition>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<call>
<caller>
<id>current_node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
</then>
<else>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</else>
</if>
</then>
<else>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ifound</id>
</left>
<right>
<num>1</num>
</right>
</assign>
<assign>
<left>
<id>cont</id>
</left>
<right>
<false /></right>
</assign>
</statements>
</block>
</else>
</if>
</else>
</if>
</statements>
</block>
</body>
</while>
</statements>
</method>
<method name="Print" rtype="bool">
<formals>
</formals>
<locals>
<dec type="bool">ntb</dec>
<dec type="Tree">current_node</dec>
</locals>
<statements>
<assign>
<left>
<id>current_node</id>
</left>
<right>
<this />
</right>
</assign>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>RecPrint</method>
<realArgs>
<id>current_node</id>
</realArgs>
</call>
</right>
</assign>
</statements>
</method>
<method name="RecPrint" rtype="bool">
<formals>
<dec type="Tree">node</dec>
</formals>
<locals>
<dec type="bool">ntb</dec>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>node</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>RecPrint</method>
<realArgs>
<call>
<caller>
<id>node</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<true />
</right>
</assign>
</else>
</if>
<print>
<call>
<caller>
<id>node</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</print>
<if>
<condition>
<call>
<caller>
<id>node</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<call>
<caller>
<this />
</caller>
<method>RecPrint</method>
<realArgs>
<call>
<caller>
<id>node</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>ntb</id>
</left>
<right>
<true />
</right>
</assign>
</else>
</if>
</statements>
</method>
<method name="accept" rtype="int">
<formals>
<dec type="Visitor">v</dec>
</formals>
<locals>
<dec type="int">nti</dec>
</locals>
<statements>
<print>
<num>333</num>
</print>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id>v</id>
</caller>
<method>visit</method>
<realArgs>
<this />
</realArgs>
</call>
</right>
</assign>
</statements>
</method>
</methods>
</class>
<class name="Visitor">
<fields>
<field type="Tree">l</field>
<field type="Tree">r</field>
</fields>
<methods>
<method name="visit" rtype="int">
<formals>
<dec type="Tree">n</dec>
</formals>
<locals>
<dec type="int">nti</dec>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>n</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">r</id>
</left>
<right>
<call>
<caller>
<id>n</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id isField="yes">r</id>
</caller>
<method>accept</method>
<realArgs>
<this />
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>nti</id>
</left>
<right>
<num>0</num>
</right>
</assign>
</else>
</if>
<if>
<condition>
<call>
<caller>
<id>n</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">l</id>
</left>
<right>
<call>
<caller>
<id>n</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id isField="yes">l</id>
</caller>
<method>accept</method>
<realArgs>
<this />
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>nti</id>
</left>
<right>
<num>0</num>
</right>
</assign>
</else>
</if>
</statements>
</method>
</methods>
</class>
<class name="MyVisitor" extends="Visitor"
>
<fields>
</fields>
<methods>
<method name="visit" rtype="int">
<formals>
<dec type="Tree">n</dec>
</formals>
<locals>
<dec type="int">nti</dec>
</locals>
<statements>
<if>
<condition>
<call>
<caller>
<id>n</id>
</caller>
<method>GetHas_Right</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">r</id>
</left>
<right>
<call>
<caller>
<id>n</id>
</caller>
<method>GetRight</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id isField="yes">r</id>
</caller>
<method>accept</method>
<realArgs>
<this />
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>nti</id>
</left>
<right>
<num>0</num>
</right>
</assign>
</else>
</if>
<print>
<call>
<caller>
<id>n</id>
</caller>
<method>GetKey</method>
<realArgs>
</realArgs>
</call>
</print>
<if>
<condition>
<call>
<caller>
<id>n</id>
</caller>
<method>GetHas_Left</method>
<realArgs>
</realArgs>
</call>
</condition>
<then>
<block>
<locals>
</locals>
<statements>
<assign>
<left>
<id isField="yes">l</id>
</left>
<right>
<call>
<caller>
<id>n</id>
</caller>
<method>GetLeft</method>
<realArgs>
</realArgs>
</call>
</right>
</assign>
<assign>
<left>
<id>nti</id>
</left>
<right>
<call>
<caller>
<id isField="yes">l</id>
</caller>
<method>accept</method>
<realArgs>
<this />
</realArgs>
</call>
</right>
</assign>
</statements>
</block>
</then>
<else>
<assign>
<left>
<id>nti</id>
</left>
<right>
<num>0</num>
</right>
</assign>
</else>
</if>
</statements>
</method>
</methods>
</class>
</program>
