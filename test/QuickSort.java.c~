// This is automatically generated by the Tiger compiler.
// Do NOT modify!

// structures
struct QuickSort
{
  struct QuickSort_vtable *vptr;
};
struct QS
{
  struct QS_vtable *vptr;
  int* number;
  int size;
};
// vtables structures
struct QuickSort_vtable
{
  char *QuickSort_gc_map;
};

struct QS_vtable
{
  char *QS_gc_map;
  int (*Start)();
  int (*Sort)();
  int (*Print)();
  int (*Init)();
};


extern void *prev;
// methods declear
int QS_Start(struct QS * this, int sz);
int QS_Sort(struct QS * this, int left, int right);
int QS_Print(struct QS * this);
int QS_Init(struct QS * this, int sz);
// vtables
struct QuickSort_vtable QuickSort_vtable_ = 
{
  "10",
};

struct QS_vtable QS_vtable_ = 
{
  "10",
  QS_Start,
  QS_Sort,
  QS_Print,
  QS_Init,
};


// methods
char *QS_Start_arguments_gc_map = "10";
int QS_Start_locals_gc_map = 4;
struct QS_Start_gc_frame{
void *prev;
char *arguments_gc_map;
int *arguments_base_address;
int locals_gc_map;
  struct QS * x_1;
  struct QS * x_2;
  struct QS * x_3;
  struct QS * x_4;
};
int QS_Start(struct QS * this, int sz)
{
struct QS_Start_gc_frame frame;
frame.prev = prev;
prev = &frame;
frame.arguments_gc_map = QS_Start_arguments_gc_map;
frame.arguments_base_address = &this;
frame.locals_gc_map = QS_Start_locals_gc_map;
  int aux01;
        
  aux01 = (frame.x_1=this, frame.x_1->vptr->Init(frame.x_1, sz));
  aux01 = (frame.x_2=this, frame.x_2->vptr->Print(frame.x_2));
  System_out_println (9999);
  aux01 = this->size - 1;
  aux01 = (frame.x_3=this, frame.x_3->vptr->Sort(frame.x_3, 0, aux01));
  aux01 = (frame.x_4=this, frame.x_4->vptr->Print(frame.x_4));
prev = frame.prev;
  return 0;
}
char *QS_Sort_arguments_gc_map = "100";
int QS_Sort_locals_gc_map = 2;
struct QS_Sort_gc_frame{
void *prev;
char *arguments_gc_map;
int *arguments_base_address;
int locals_gc_map;
  struct QS * x_5;
  struct QS * x_6;
};
int QS_Sort(struct QS * this, int left, int right)
{
struct QS_Sort_gc_frame frame;
frame.prev = prev;
prev = &frame;
frame.arguments_gc_map = QS_Sort_arguments_gc_map;
frame.arguments_base_address = &this;
frame.locals_gc_map = QS_Sort_locals_gc_map;
  int v;
  int i;
  int j;
  int nt;
  int t;
  int cont01;
  int cont02;
  int aux03;
    
  t = 0;
  if (left < right)
    {

      v = this->number[right+4];
      i = left - 1;
      j = right;
      cont01 = 1;
      while (cont01)
        {

          cont02 = 1;
          while (cont02)
            {

              i = i + 1;
              aux03 = this->number[i+4];
              if (!(aux03 < v))
                cont02 = 0;

              else
                cont02 = 1;

            }

          cont02 = 1;
          while (cont02)
            {

              j = j - 1;
              aux03 = this->number[j+4];
              if (!(v < aux03))
                cont02 = 0;

              else
                cont02 = 1;

            }

          t = this->number[i+4];
          this->number[i+4] = this->number[j+4];
          this->number[j+4] = t;
          if (j < (i + 1))
            cont01 = 0;

          else
            cont01 = 1;

        }

      this->number[j+4] = this->number[i+4];
      this->number[i+4] = this->number[right+4];
      this->number[right+4] = t;
      nt = (frame.x_5=this, frame.x_5->vptr->Sort(frame.x_5, left, i - 1));
      nt = (frame.x_6=this, frame.x_6->vptr->Sort(frame.x_6, i + 1, right));
    }

  else
    nt = 0;

prev = frame.prev;
  return 0;
}
char *QS_Print_arguments_gc_map = "1";
int QS_Print_locals_gc_map = 0;
struct QS_Print_gc_frame{
void *prev;
char *arguments_gc_map;
int *arguments_base_address;
int locals_gc_map;
};
int QS_Print(struct QS * this)
{
struct QS_Print_gc_frame frame;
frame.prev = prev;
prev = &frame;
frame.arguments_gc_map = QS_Print_arguments_gc_map;
frame.arguments_base_address = &this;
frame.locals_gc_map = QS_Print_locals_gc_map;
  int j;

  j = 0;
  while (j < (this->size))
    {

      System_out_println (this->number[j+4]);
      j = j + 1;
    }

prev = frame.prev;
  return 0;
}
char *QS_Init_arguments_gc_map = "10";
int QS_Init_locals_gc_map = 0;
struct QS_Init_gc_frame{
void *prev;
char *arguments_gc_map;
int *arguments_base_address;
int locals_gc_map;
};
int QS_Init(struct QS * this, int sz)
{
struct QS_Init_gc_frame frame;
frame.prev = prev;
prev = &frame;
frame.arguments_gc_map = QS_Init_arguments_gc_map;
frame.arguments_base_address = &this;
frame.locals_gc_map = QS_Init_locals_gc_map;

  this->size = sz;
  this->number = Tiger_new_array(sz);
  this->number[0+4] = 20;
  this->number[1+4] = 7;
  this->number[2+4] = 12;
  this->number[3+4] = 18;
  this->number[4+4] = 2;
  this->number[5+4] = 11;
  this->number[6+4] = 6;
  this->number[7+4] = 9;
  this->number[8+4] = 19;
  this->number[9+4] = 5;
prev = frame.prev;
  return 0;
}

// main method
struct Tiger_main_gc_frame{
void *prev;
char *arguments_gc_map;
int *arguments_base_address;
int locals_gc_map;
  struct QS * x_0;
};
char *Tiger_main_arguments_gc_map = "";
int Tiger_main_locals_gc_map = 1;
int Tiger_main ()
{struct Tiger_main_gc_frame frame;
frame.prev = prev;
prev = &frame;
frame.arguments_gc_map = Tiger_main_arguments_gc_map;
frame.locals_gc_map = Tiger_main_locals_gc_map;
  {
    printf("int:%d\n",sizeof(char));
    System_out_println ((frame.x_0=((struct QS*)(Tiger_new (&QS_vtable_, sizeof(struct QS)))), frame.x_0->vptr->Start(frame.x_0, 10)));
  }
prev = frame.prev;
}



